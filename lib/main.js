// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var ack, app, debug, noop, nsq, parse, patch, _;

  debug = require('debug')('trampoline:main');

  _ = require('underscore');

  parse = require('co-body');

  app = require('koa')();

  nsq = require('nsq.js');

  noop = function() {};

  patch = function(Server) {
    Server.Manager.prototype.onClientMessage = function(id, packet) {
      var p;
      if (!this.namespaces[packet.endpoint]) {
        return;
      }
      this.namespaces[packet.endpoint].handlePacket(id, packet);
      p = _.clone(packet);
      p.name = '*';
      p.args = _.pick(packet, 'id', 'name', 'args');
      return this.namespaces[packet.endpoint].handlePacket(id, p);
    };
    return Server;
  };

  ack = function(socket, ackId, args) {
    if (!_.isArray(args)) {
      args = [args];
    }
    return socket.packet({
      type: 'ack',
      args: args,
      ackId: ackId
    });
  };

  module.exports = function(options, configure) {
    var io, server, socketPool, writer;
    if (options == null) {
      options = {};
    }
    if (configure == null) {
      configure = noop;
    }
    _.defaults(options, {
      hostname: require('os').hostname(),
      port: 8000
    });
    socketPool = {};
    app.use(function*(next) {
      this.request.body = yield parse(this);
      yield next;
    });
    app.use(require('koa-trie-router')(app));
    app.post('/:socketId', function*(next) {
      if (!((socketPool[this.params.socketId] === true) && (this.query.topic != null))) {
        return;
      }
      this.body = 'ok';
      if (this.request.body == null) {
        return;
      }
      io.sockets.socket(this.params.socketId).emit(this.query.topic, this.request.body);
    });
    app.post('/:socketId/:messageId', function*(next) {
      if (socketPool[this.params.socketId] !== true) {
        return;
      }
      this.body = 'ok';
      if (this.request.body == null) {
        return;
      }
      ack(io.sockets.socket(this.params.socketId), this.params.messageId, this.request.body);
      yield next;
    });
    server = require('http').Server(app.callback());
    io = patch(require('socket.io')).listen(server);
    if (options.nsq != null) {
      writer = nsq.writer(options.nsq);
    }
    io.configure(function() {
      return configure(io);
    });
    io.sockets.on('connection', function(socket) {
      socketPool[socket.id] = true;
      socket.on('disconnect', function() {
        return socketPool[socket.id] = void 0;
      });
      return socket.on('*', function(_arg, done) {
        var args, body, id, name;
        name = _arg.name, args = _arg.args, id = _arg.id;
        debug('on message');
        body = {
          name: name,
          id: id,
          args: args,
          replyTo: "http://" + options.hostname + ":" + options.port + "/" + socket.id + "/" + id
        };
        debug('bouncing message: %j', body);
        if (options.nsq != null) {
          return writer.publish(name, body);
        }
      });
    });
    return server.listen(options.port);
  };

}).call(this);
