// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var debug, nsq, parse, passthrough, patch, _;

  debug = require('debug')('mux:main');

  patch = require('socketio-wildcard');

  _ = require('underscore');

  parse = require('co-body');

  nsq = require('nsq.js');


  /*
  io    = require('socket.io')()
  mount = require('koa-mount')
  mux   = require('mux.io')()
  app   = require('koa')()
  
   * Standard
  mux.createHTTPServer().listen()
  mux.createWSServer(io)
  
   * Namespace
  nsp   = '/mux'
  
  mux.createWSServer(io.of(nsp))
  app.use(mount(nsp, mux.createHTTPServer()))
  app.listen()
   */

  passthrough = function(d) {
    return d;
  };

  module.exports = function(options, fn) {
    var createHTTPServer, createWSServer, nsp, writer;
    if (options == null) {
      options = {};
    }
    if (fn == null) {
      fn = passthrough;
    }
    if (options.nsq != null) {
      debug('options %j', options);
      writer = nsq.writer(options.nsq);
    }
    nsp = {
      connected: {}
    };
    _.defaults(options, {
      hostname: require('os').hostname(),
      port: 8000
    });
    createHTTPServer = function() {
      var app;
      app = require('koa')();
      app.use(function*(next) {
        var _base;
        if ((_base = this.request).body == null) {
          _base.body = yield parse(this);
        }
        yield next;
      });
      app.use(require('koa-trie-router')(app));
      app.post('/:socketId', function*(next) {
        var socket;
        if (!((nsp.connected[this.params.socketId] != null) && (this.query.topic != null))) {
          return;
        }
        this.body = 'ok';
        socket = nsp.connected[this.params.socketId];
        if (this.request.body == null) {
          return;
        }
        socket.emit(this.query.topic, this.request.body);
      });
      return app.post('/:socketId/:messageId', function*(next) {
        var socket;
        if (nsp.connected[this.params.socketId] == null) {
          return;
        }
        this.body = 'ok';
        socket = nsp.connected[this.params.socketId];
        if (this.request.body == null) {
          return;
        }
        socket.ack(this.params.messageId)(this.request.body);
        yield next;
      });
    };
    createWSServer = function(namespace, fn) {
      if (fn == null) {
        fn = passthrough;
      }
      nsp = namespace.sockets != null ? namespace.sockets : namespace;
      nsp.use(function(socket, next) {
        debug('got connection from %s', socket.id);
        return next();
      });
      nsp.use(patch());
      debug('attached to namespace %s', nsp.name || '/');
      nsp.on('connection', function(socket) {
        debug('on connection');
        return socket.on('*', function(packet) {
          var topic, _ref;
          debug('on message');
          if (packet.id != null) {
            packet = _.clone(packet);
            packet.replyTo = "http://" + options.hostname + ":" + options.port + nsp.name + socket.id + "/" + packet.id;
          }
          topic = packet != null ? (_ref = packet.data) != null ? _ref[0] : void 0 : void 0;
          if ((options.nsq != null) && (topic != null)) {
            debug('bouncing topic:%s packet: %j', topic, packet);
            return writer.publish(topic, fn(packet));
          }
        });
      });
      return namespace;
    };
    return {
      createWSServer: createWSServer,
      createHTTPServer: createHTTPServer
    };
  };

}).call(this);
