// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var app, client, debug, existsSync, fs, parse, program, raven, _;

  fs = require('fs');

  debug = require('debug')('trampoline:main');

  app = require('koa')();

  _ = require('underscore');

  program = require('commander');

  parse = require('co-body');

  raven = require('raven');

  program.version(require("" + __dirname + "/../package.json").version || '0.0.1').option('-e --error [sentry]', 'error logging via sentry').option('-p --port <port>', 'a port to listen to', parseInt).parse(process.argv);

  if (program.error != null) {
    client = new raven.Client(program.error);
    _.bindAll(client, 'captureError', 'captureQuery', 'captureMessage');
    app.on('error', client.captureError);
  }

  app.on('error', function(error) {
    return console.error(error.stack);
  });

  app.use(function*(next) {
    var e;
    try {
      this.request.body = yield parse(this);
    } catch (_error) {
      e = _error;
      debug('error parsing body %s', e.message);
      if (e.status !== 415) {
        throw e;
      }
    }
    yield next;
  });

  existsSync = _.memoize(fs.existsSync);

  app.use(function*(next) {
    var e, modulePath;
    modulePath = "" + __dirname + "/modules" + this.request.path + ".js";
    if (!existsSync(modulePath)) {
      return this["throw"](404);
    }
    try {
      require(modulePath)(this.request.body, this.request.query);
    } catch (_error) {
      e = _error;
      debug('error while processing message: %s', e.message);
    }
    this.body = 'OK';
    yield next;
  });

  app.listen(program.port || 8000);

}).call(this);
